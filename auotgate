local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Remote = ReplicatedStorage:FindFirstChild("Remote")
local Bindable = ReplicatedStorage:FindFirstChild("Bindable")

---------------------------------------------------------------------
-- CONFIG
---------------------------------------------------------------------
local GateConfig = {
    TeleportEnemies = false,
    WaitBetweenTP = false,
    WaitDelay = 3,
    EnemyRange = 500, -- ajustado
}

---------------------------------------------------------------------
-- Helpers
---------------------------------------------------------------------
local function getEnemyPart(enemy)
    return enemy:FindFirstChild("HumanoidRootPart") or enemy:FindFirstChild("Torso") or enemy.PrimaryPart
end

local function getGateEnemiesByRange(range)
    local out = {}
    if not (LocalPlayer.Character and LocalPlayer.Character.PrimaryPart) then return out end
    local pos = LocalPlayer.Character.PrimaryPart.Position
    for _, e in pairs(CollectionService:GetTagged("Attackable")) do
        local part = getEnemyPart(e)
        if part then
            local d = (part.Position - pos).Magnitude
            if d <= range then
                table.insert(out, {obj = e, dist = d, part = part})
            end
        end
    end
    table.sort(out, function(a,b) return a.dist < b.dist end)
    return out
end

---------------------------------------------------------------------
-- GATES AUTO SYSTEM
---------------------------------------------------------------------
local GateOrder = { "E","D","C","B","A","S","Z","X","Anniversary" }
local SelectedRank = "E"
local GateActive = false
local AutoGateEnabled = false
local currentRunId = nil

---------------------------------------------------------------------
-- UI (Rayfield)
---------------------------------------------------------------------
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "Luvwas Hub",
    LoadingTitle = "Carregando...",
    LoadingSubtitle = "by Luvwas",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "LuvwasHub",
       FileName = "AutoGateConfig"
    },
    Discord = {
       Enabled = false
    },
    KeySystem = false
})

local GatesTab = Window:CreateTab("Auto Gate", 4483362458) -- Ã­cone opcional
GatesTab:CreateSection("Gate Controls")

-- Dropdown Rank
GatesTab:CreateDropdown({
    Name = "Rank do Gate",
    Options = GateOrder,
    CurrentOption = {SelectedRank}, -- precisa ser tabela no Rayfield
    Flag = "GateRank",
    Callback = function(Value)
        -- Rayfield retorna tabela mesmo em Multi=false
        SelectedRank = Value[1]
        print("[AutoGate] Rank escolhido:", SelectedRank)
    end
})

-- Toggle AutoGate
GatesTab:CreateToggle({
    Name = "Auto Open + TP",
    CurrentValue = false,
    Flag = "AutoGate",
    Callback = function(Value)
        AutoGateEnabled = Value
        if Value then
            GateActive = true
            task.wait(1)
            Remote.SummonGate:FireServer(SelectedRank)
            print("[AutoGate] Summon inicial:", SelectedRank)
        else
            GateActive = false
            print("[AutoGate] AutoGate desativado.")
        end
    end
})

-- Toggle TeleportEnemies
GatesTab:CreateToggle({
    Name = "Teleport Inimigos",
    CurrentValue = GateConfig.TeleportEnemies,
    Callback = function(Value)
        GateConfig.TeleportEnemies = Value
    end
})

-- Toggle WaitBetweenTP
GatesTab:CreateToggle({
    Name = "Esperar entre TPs",
    CurrentValue = GateConfig.WaitBetweenTP,
    Callback = function(Value)
        GateConfig.WaitBetweenTP = Value
    end
})

-- Slider WaitDelay
GatesTab:CreateSlider({
    Name = "Delay (segundos)",
    Range = {1,5},
    Increment = 1,
    CurrentValue = GateConfig.WaitDelay,
    Flag = "WaitDelay",
    Callback = function(Value)
        GateConfig.WaitDelay = Value
    end
})

-- Slider EnemyRange
GatesTab:CreateSlider({
    Name = "Range inimigos",
    Range = {1,500},
    Increment = 1,
    CurrentValue = GateConfig.EnemyRange,
    Flag = "EnemyRange",
    Callback = function(Value)
        GateConfig.EnemyRange = Value
    end
})

---------------------------------------------------------------------
-- EVENTOS REMOTOS
---------------------------------------------------------------------
Remote.GateCreated.OnClientEvent:Connect(function(runId)
    if AutoGateEnabled and runId then
        currentRunId = runId
        GateActive = true
        task.wait(0.5)
        Bindable.Dismount:Fire()
        Remote.JoinGatesMode:FireServer(runId)
        task.wait(0.3)
        Bindable.AttemptTravel:Fire("GatesMode", true, runId)
        print("[AutoGate] Teleportado para Gate:", SelectedRank)
    end
end)

Remote.GatesModeLost.OnClientEvent:Connect(function()
    GateActive = false
    print("[AutoGate] Gate finalizado:", SelectedRank)
end)

---------------------------------------------------------------------
-- LOOP DE TELEPORT NOS INIMIGOS
---------------------------------------------------------------------
task.spawn(function()
    while true do
        task.wait(0.2)
        if GateActive and GateConfig.TeleportEnemies then
            local enemies = getGateEnemiesByRange(GateConfig.EnemyRange)
            for _, enemy in ipairs(enemies) do
                if enemy.part then
                    if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart then
                        LocalPlayer.Character.PrimaryPart.CFrame = enemy.part.CFrame + Vector3.new(0,2,0)
                    end
                    if GateConfig.WaitBetweenTP then
                        task.wait(GateConfig.WaitDelay)
                    end
                end
            end
        end
    end
end)

---------------------------------------------------------------------
-- LOOP FIXO DE 30s POR GATE
---------------------------------------------------------------------
task.spawn(function()
    while true do
        task.wait(1)
        if GateActive then
            local start = tick()
            while GateActive and tick() - start < 30 do
                task.wait(1)
            end
            if GateActive then
                GateActive = false
                print("[AutoGate] Tempo de 40s esgotado, trocando Gate...")

                -- Sai para TimeChamber
                Remote.AttemptTravel:InvokeServer("TimeChamber")

                -- Spawna novo Gate
                task.wait(3)
                Remote.SummonGate:FireServer(SelectedRank)
                print("[AutoGate] Summon novo:", SelectedRank)
            end
        end
    end
end)

print("[OK] Script carregado com Rayfield. Teleporte de inimigos ativo (range 500).")
