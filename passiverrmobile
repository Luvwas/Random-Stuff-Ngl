-- Carregamento do Kavo UI Library (funciona bem no celular)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

-- Configura√ß√µes b√°sicas
local AllPassives = {
    ["Normal"] = {
        "Dmg1", "Dmg2", "Dmg3", "Boss1", "Boss2", "Boss3", 
        "Drop1", "Drop2", "Drop3", "Yen1", "Yen2", "Yen3",
        "LevelUp1", "LevelUp2", "LevelUp3", "Ability1", "Ability2", "Ability3",
        "Leader1", "Leader2", "Leader3", "Luck1", "Luck2", "Luck3", "Luck4",
        "Cap1", "Cap2", "Cap3", "Speed", "Giant", "Tiny", "Tank", "Blessing",
        "Gold", "Merc", "Dragon", "Prodigy", "Ghost", "Ace",
        "Demon", "BrokenLimiter", "Angel", "Interstellar"
    },
    ["Summer24"] = {
        "SeaSpearman", "DevastatingDaylight", "SummerFortune",
        "SapphireSummer", "SummerGenerosity", "ShiningSun", "CoralCommander"
    }
}
AllPassives["Requiem"] = AllPassives["Normal"]

-- Vari√°veis globais
local selectedUnit, selectedMachine = nil, "Normal"
local selectedPassives = {}
local rolling = false
local rollDelay = 0.2
local rollCount = 0

-- Sistema Multi-Unit
local multiUnitQueue = {}
local multiUnitRolling = false

-- Sistema de Log
local passiveLog = {}

-- Configura√ß√£o de detec√ß√£o
local detectionConfig = {
    baseDelay = 0.3,
    maxRetries = 3,
    retryDelay = 0.1,
    enabled = false
}

-- Store initialization
local LocalDairebStore, GameData
local success, error = pcall(function()
    LocalDairebStore = require(game:GetService("ReplicatedStorage").ModuleScripts.LocalDairebStore)
    LocalDairebStore:WaitForInit()
    GameData = LocalDairebStore.GetStoreProxy("GameData")
end)

-- HasPassive module (opcional)
local HasPassive = nil
pcall(function()
    HasPassive = require(game:GetService("ReplicatedStorage").ModuleScripts.HasPassive)
end)

-- ===== FUN√á√ïES PRINCIPAIS =====

local function getCurrentUnit(uid)
    local targetUID = uid or selectedUnit
    if not GameData or not targetUID then return nil end
    
    local success, result = pcall(function()
        local gameData = GameData:GetData()
        if not gameData or not gameData.Pets then return nil end
        
        for _, unit in pairs(gameData.Pets) do
            if unit and unit.UID == targetUID then
                return unit
            end
        end
        return nil
    end)
    
    return success and result or nil
end

local function passiveToString(passive)
    if passive == nil then return nil end
    
    if type(passive) == "string" and passive ~= "" and passive ~= "nil" then 
        return passive 
    end
    
    if type(passive) == "number" then 
        return tostring(passive) 
    end
    
    local str = tostring(passive)
    if str and str ~= "" and str ~= "nil" and str ~= "false" and str ~= "true" then
        return str
    end
    
    return nil
end

local function checkPassivesManual(unit, desiredPassives)
    if not unit or not unit.Passives or not desiredPassives then 
        return false, nil 
    end
    
    local currentPassives = {}
    
    for i, passive in pairs(unit.Passives) do
        local passiveStr = passiveToString(passive)
        if passiveStr then
            currentPassives[passiveStr] = true
        end
    end
    
    for _, desired in pairs(desiredPassives) do
        local desiredStr = tostring(desired)
        
        if currentPassives[desiredStr] then
            return true, desiredStr
        end
        
        for currentPassive, _ in pairs(currentPassives) do
            if string.lower(currentPassive) == string.lower(desiredStr) then
                return true, currentPassive
            end
        end
    end
    
    return false, nil
end

local function detectDesiredPassive(targetUID)
    if not detectionConfig.enabled or not selectedPassives or not next(selectedPassives) then
        return false, nil
    end
    
    for attempt = 1, detectionConfig.maxRetries do
        local currentUnit = getCurrentUnit(targetUID)
        if not currentUnit then
            task.wait(detectionConfig.retryDelay)
            continue
        end
        
        local found, foundPassive = checkPassivesManual(currentUnit, selectedPassives)
        if found then
            return true, foundPassive
        end
        
        if attempt < detectionConfig.maxRetries then
            task.wait(detectionConfig.retryDelay)
        end
    end
    
    return false, nil
end

local function GetUnits()
    if not GameData then return {"Erro: GameData n√£o carregado"} end
    
    local success, result = pcall(function()
        local gameData = GameData:GetData()
        if not gameData or not gameData.Pets then
            return {"Nenhum pet encontrado"}
        end
            
        local list = {}
        for _, unit in pairs(gameData.Pets) do
            if unit and unit.UID then
                local displayName = unit.PetId or "Unknown"
                if unit.CustomName and unit.CustomName ~= "" then
                    displayName = displayName .. " (" .. unit.CustomName .. ")"
                end
                table.insert(list, tostring(unit.UID) .. " | " .. displayName)
            end
        end
        
        return #list > 0 and list or {"Nenhum pet encontrado"}
    end)
    
    return success and result or {"Erro ao carregar pets"}
end

-- Fun√ß√£o de notifica√ß√£o simples
local function notify(title, text, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 3
    })
end

-- ===== CRIA√á√ÉO DA UI COM KAVO =====

local Window = Library.CreateLib("Luvwas Passive Roll - Mobile", "DarkTheme")

-- Aba Principal
local MainTab = Window:NewTab("üé≤ Main")
local MainSection = MainTab:NewSection("Configura√ß√£o Principal")

-- Status do sistema
MainSection:NewLabel("GameData: " .. (GameData and "‚úÖ Carregado" or "‚ùå Erro"))
MainSection:NewLabel("HasPassive: " .. (HasPassive and "‚úÖ Dispon√≠vel" or "‚ö†Ô∏è Manual"))

-- Sele√ß√£o de Unit
local unitList = GetUnits()
MainSection:NewDropdown("Selecionar Boneco", "Escolha seu boneco", unitList, function(currentOption)
    if currentOption and not currentOption:find("Erro") and not currentOption:find("Nenhum") then
        selectedUnit = tonumber(currentOption:match("^(%d+)"))
        notify("Unit Selecionada", "‚úÖ Unit: " .. tostring(selectedUnit), 2)
        
        -- Mostrar passivas atuais
        local unit = getCurrentUnit()
        if unit and unit.Passives then
            local passiveList = {}
            for _, passive in pairs(unit.Passives) do
                local passiveStr = passiveToString(passive)
                if passiveStr then
                    table.insert(passiveList, passiveStr)
                end
            end
            local passiveText = #passiveList > 0 and table.concat(passiveList, ", ") or "Nenhuma"
            print("üéØ Passivas atuais: " .. passiveText)
        end
    else
        selectedUnit = nil
    end
end)

MainSection:NewButton("üîÑ Atualizar Lista", "Atualizar lista de bonecos", function()
    unitList = GetUnits()
    notify("Lista Atualizada", "üîÑ Lista de bonecos atualizada!", 2)
end)

-- Sele√ß√£o de M√°quina
MainSection:NewDropdown("Selecionar M√°quina", "Escolha a m√°quina", {"Normal", "Requiem", "Summer24"}, function(currentOption)
    selectedMachine = currentOption
    notify("M√°quina Selecionada", "üéÆ M√°quina: " .. currentOption, 2)
end)

-- Se√ß√£o de Passivas
local PassiveSection = MainTab:NewSection("Passivas Desejadas")

-- Dropdown com TODAS as passivas dispon√≠veis
PassiveSection:NewDropdown("Adicionar Passiva", "Escolha uma passiva para adicionar", AllPassives["Normal"], function(currentOption)
    if currentOption and not table.find(selectedPassives, currentOption) then
        table.insert(selectedPassives, currentOption)
        notify("Passiva Adicionada", "‚úÖ " .. currentOption .. " adicionada!", 2)
        print("üéØ Passivas selecionadas: " .. table.concat(selectedPassives, ", "))
    elseif table.find(selectedPassives, currentOption) then
        notify("J√° Selecionada", "‚ö†Ô∏è " .. currentOption .. " j√° est√° selecionada!", 2)
    end
end)

PassiveSection:NewButton("üóëÔ∏è Limpar Passivas", "Remover todas as passivas selecionadas", function()
    selectedPassives = {}
    notify("Passivas Limpas", "üóëÔ∏è Todas as passivas removidas!", 2)
    print("üéØ Passivas selecionadas: (nenhuma)")
end)

PassiveSection:NewButton("üìã Ver Passivas Selecionadas", "Mostrar passivas selecionadas", function()
    if #selectedPassives > 0 then
        local passiveText = table.concat(selectedPassives, ", ")
        print("üéØ Passivas selecionadas: " .. passiveText)
        notify("Passivas Selecionadas", "üìã " .. #selectedPassives .. " passivas - veja o console", 3)
    else
        notify("Nenhuma Passiva", "‚ùå Nenhuma passiva selecionada", 2)
    end
end)

-- Se√ß√£o de Controles
local ControlSection = MainTab:NewSection("Controles")

ControlSection:NewSlider("Delay entre rolls", "Delay em segundos", 2, 0.1, function(s)
    rollDelay = s / 10
end)

ControlSection:NewSlider("Delay de detec√ß√£o", "Delay de detec√ß√£o em segundos", 3, 0.1, function(s)
    detectionConfig.baseDelay = s / 10
end)

local autoRollActive = false
ControlSection:NewToggle("üé≤ Auto Roll", "Iniciar/Parar Auto Roll", function(state)
    if state then
        if not selectedUnit then
            notify("Erro", "‚ùå Selecione um boneco primeiro!", 3)
            return
        end
        
        if not selectedPassives or not next(selectedPassives) then
            notify("Erro", "‚ùå Selecione pelo menos uma passiva!", 3)
            return
        end
        
        rolling = true
        rollCount = 0
        detectionConfig.enabled = true
        autoRollActive = true
        
        notify("Auto Roll Iniciado", "üöÄ Procurando: " .. table.concat(selectedPassives, ", "), 4)
        
        task.spawn(function()
            while rolling and autoRollActive do
                rollCount = rollCount + 1
                
                local rollSuccess, rollError = pcall(function()
                    game:GetService("ReplicatedStorage").Remote.RollPassive:FireServer(
                        selectedUnit, selectedMachine, true, 1
                    )
                end)
                
                if not rollSuccess then
                    rolling = false
                    detectionConfig.enabled = false
                    autoRollActive = false
                    notify("Erro no Roll", "‚ùå Erro: " .. tostring(rollError), 5)
                    print("‚ùå Erro no roll: " .. tostring(rollError))
                    break
                end
                
                task.wait(detectionConfig.baseDelay)
                
                if not rolling then break end
                
                local found, foundPassive = detectDesiredPassive(selectedUnit)
                
                if found then
                    rolling = false
                    detectionConfig.enabled = false
                    autoRollActive = false
                    
                    notify("üéâ PASSIVA ENCONTRADA!", foundPassive .. " em " .. rollCount .. " rolls!", 10)
                    
                    -- Adicionar ao log
                    local timestamp = os.date("%H:%M:%S")
                    local logEntry = string.format("[%s] %s (%d rolls)", timestamp, foundPassive, rollCount)
                    table.insert(passiveLog, logEntry)
                    if #passiveLog > 10 then
                        table.remove(passiveLog, 1)
                    end
                    
                    print("üéâ SUCESSO: " .. foundPassive .. " encontrada em " .. rollCount .. " rolls!")
                    break
                end
                
                -- Mostrar progresso a cada 10 rolls
                if rollCount % 10 == 0 then
                    print("üé≤ Roll #" .. rollCount .. " - Continuando...")
                end
                
                if not rolling then break end
                
                task.wait(rollDelay)
            end
        end)
        
    else
        rolling = false
        detectionConfig.enabled = false
        autoRollActive = false
        notify("Auto Roll Parado", "‚èπÔ∏è Auto Roll parado pelo usu√°rio", 2)
    end
end)

ControlSection:NewButton("üõë Parada de Emerg√™ncia", "Parar todos os sistemas", function()
    rolling = false
    multiUnitRolling = false
    detectionConfig.enabled = false
    autoRollActive = false
    notify("Sistema Parado", "üõë Todos os sistemas parados!", 2)
end)

-- Aba Multi-Unit CORRIGIDA
local MultiTab = Window:NewTab("üöÄ Multi-Unit")
local MultiSection = MultiTab:NewSection("Gerenciar Fila")

MultiSection:NewButton("‚ûï Adicionar √† Fila", "Adicionar boneco selecionado √† fila", function()
    if not selectedUnit then
        notify("Erro", "‚ùå Selecione um boneco na aba Main primeiro!", 3)
        return
    end
    
    -- Verificar se j√° est√° na fila
    for _, unitData in ipairs(multiUnitQueue) do
        if unitData.uid == selectedUnit then
            notify("J√° na Fila", "‚ö†Ô∏è Este boneco j√° est√° na fila!", 3)
            return
        end
    end
    
    if #multiUnitQueue >= 15 then
        notify("Fila Cheia", "‚ö†Ô∏è Fila cheia! M√°ximo 15 personagens.", 3)
        return
    end
    
    local unit = getCurrentUnit()
    local unitName = unit and (unit.PetId or "Unknown") or ("Unit " .. selectedUnit)
    
    table.insert(multiUnitQueue, {
        uid = selectedUnit,
        name = unitName,
        completed = false
    })
    
    notify("Adicionado √† Fila", "‚úÖ " .. unitName .. " adicionado! Total: " .. #multiUnitQueue, 3)
    print("üìã Fila atual: " .. #multiUnitQueue .. " personagens")
end)

MultiSection:NewButton("üìã Ver Fila", "Ver fila atual", function()
    if #multiUnitQueue == 0 then
        notify("Fila Vazia", "üìã Nenhum personagem na fila", 2)
    else
        print("\nüìã === FILA MULTI-UNIT ===")
        for i, unitData in ipairs(multiUnitQueue) do
            local status = unitData.completed and "‚úÖ" or "‚è≥"
            print(i .. ". " .. unitData.name .. " " .. status)
        end
        print("========================\n")
        
        notify("Fila Atual", "üìã " .. #multiUnitQueue .. " personagens - veja o console", 3)
    end
end)

MultiSection:NewButton("üóëÔ∏è Limpar Fila", "Limpar toda a fila", function()
    multiUnitQueue = {}
    notify("Fila Limpa", "üóëÔ∏è Fila limpa com sucesso!", 2)
end)

-- SISTEMA MULTI-UNIT CORRIGIDO
local multiUnitActive = false
MultiSection:NewToggle("üöÄ Iniciar Multi-Unit", "Processar toda a fila", function(state)
    if state then
        if #multiUnitQueue == 0 then
            notify("Fila Vazia", "‚ùå Adicione pelo menos um personagem √† fila!", 3)
            return
        end
        
        if not selectedPassives or not next(selectedPassives) then
            notify("Sem Passivas", "‚ùå Selecione passivas na aba Main!", 3)
            return
        end
        
        multiUnitRolling = true
        rolling = true
        detectionConfig.enabled = true
        multiUnitActive = true
        rollCount = 0
        
        notify("Multi-Unit Iniciado", "üöÄ Processando " .. #multiUnitQueue .. " personagens", 4)
        print("üöÄ === INICIANDO MULTI-UNIT ===")
        print("üìã Fila: " .. #multiUnitQueue .. " personagens")
        print("üéØ Procurando: " .. table.concat(selectedPassives, ", "))
        
        task.spawn(function()
            local processedCount = 0
            
            while multiUnitRolling and multiUnitActive and #multiUnitQueue > 0 do
                local currentUnitData = multiUnitQueue[1] -- Sempre pegar o primeiro da fila
                
                if not currentUnitData then
                    break
                end
                
                local currentUID = currentUnitData.uid
                local unitName = currentUnitData.name
                
                print("üé≤ Processando: " .. unitName .. " (UID: " .. currentUID .. ")")
                notify("Processando", "üé≤ " .. unitName, 2)
                
                local unitRollCount = 0
                local maxRollsPerUnit = 1000 -- Limite de seguran√ßa
                
                -- Loop para o personagem atual
                while multiUnitRolling and multiUnitActive and unitRollCount < maxRollsPerUnit do
                    unitRollCount = unitRollCount + 1
                    rollCount = rollCount + 1
                    
                    -- Fazer o roll
                    local rollSuccess, rollError = pcall(function()
                        game:GetService("ReplicatedStorage").Remote.RollPassive:FireServer(
                            currentUID, selectedMachine, true, 1
                        )
                    end)
                    
                    if not rollSuccess then
                        print("‚ùå Erro no roll para " .. unitName .. ": " .. tostring(rollError))
                        break
                    end
                    
                    -- Aguardar detec√ß√£o
                    task.wait(detectionConfig.baseDelay)
                    
                    if not multiUnitRolling then break end
                    
                    -- Verificar se encontrou a passiva
                    local found, foundPassive = detectDesiredPassive(currentUID)
                    
                    if found then
                        notify("Sucesso Multi-Unit!", "üéâ " .. unitName .. " pegou " .. foundPassive .. "!", 5)
                        
                        -- Adicionar ao log
                        local timestamp = os.date("%H:%M:%S")
                        local logEntry = string.format("[%s] %s: %s (%d rolls)", timestamp, unitName, foundPassive, unitRollCount)
                        table.insert(passiveLog, logEntry)
                        if #passiveLog > 15 then
                            table.remove(passiveLog, 1)
                        end
                        
                        print("üéâ " .. unitName .. " conseguiu " .. foundPassive .. " em " .. unitRollCount .. " rolls!")
                        
                        -- Remover da fila (sempre o primeiro)
                        table.remove(multiUnitQueue, 1)
                        processedCount = processedCount + 1
                        
                        break -- Sair do loop deste personagem
                    end
                    
                    -- Progresso
                    if unitRollCount % 25 == 0 then
                        print("üìä " .. unitName .. ": " .. unitRollCount .. " rolls...")
                    end
                    
                    if not multiUnitRolling then break end
                    
                    task.wait(rollDelay)
                end
                
                -- Se chegou no limite sem encontrar, remover da fila tamb√©m
                if unitRollCount >= maxRollsPerUnit then
                    print("‚ö†Ô∏è " .. unitName .. " atingiu limite de " .. maxRollsPerUnit .. " rolls")
                    table.remove(multiUnitQueue, 1)
                    processedCount = processedCount + 1
                end
            end
            
            -- Finaliza√ß√£o
            multiUnitRolling = false
            rolling = false
            detectionConfig.enabled = false
            multiUnitActive = false
            
            print("üèÅ Multi-Unit finalizado! Processados: " .. processedCount .. " personagens")
            
            if #multiUnitQueue == 0 then
                notify("Multi-Unit Conclu√≠do!", "üéâ Todos os " .. processedCount .. " personagens completaram!", 8)
            else
                notify("Multi-Unit Parado", "‚èπÔ∏è Processados: " .. processedCount .. ", Restantes: " .. #multiUnitQueue, 5)
            end
        end)
        
    else
        multiUnitRolling = false
        rolling = false
        detectionConfig.enabled = false
        multiUnitActive = false
        notify("Multi-Unit Parado", "‚èπÔ∏è Multi-Unit parado pelo usu√°rio", 2)
    end
end)

-- Aba de Log
local LogTab = Window:NewTab("üìã Log")
local LogSection = LogTab:NewSection("Sistema de Log")

LogSection:NewButton("üìã Ver Log Completo", "Mostrar todo o hist√≥rico", function()
    if #passiveLog > 0 then
        print("\nüìã === LOG DE PASSIVAS ===")
        for i, log in ipairs(passiveLog) do
            print(log)
        end
        print("==========================\n")
        
        notify("Log Exibido", "üìã " .. #passiveLog .. " entradas - veja o console", 3)
    else
        notify("Log Vazio", "üìã Nenhuma passiva encontrada ainda...", 2)
    end
end)

LogSection:NewButton("üóëÔ∏è Limpar Log", "Limpar hist√≥rico", function()
    passiveLog = {}
    notify("Log Limpo", "üóëÔ∏è Hist√≥rico de passivas limpo!", 2)
end)

-- Aba de Debug
local DebugTab = Window:NewTab("üîß Debug")
local DebugSection = DebugTab:NewSection("Ferramentas de Debug")

DebugSection:NewButton("üîç Ver Passivas Atuais", "Mostrar passivas da unit selecionada", function()
    if not selectedUnit then
        notify("Erro Debug", "‚ùå Selecione uma unit primeiro!", 2)
        return
    end
    
    local unit = getCurrentUnit(selectedUnit)
    if unit then
        print("\nüîç === PASSIVAS DA UNIT " .. selectedUnit .. " ===")
        
        if unit.Passives and next(unit.Passives) then
            for i, passive in pairs(unit.Passives) do
                local passiveStr = passiveToString(passive)
                if passiveStr then
                    print("[" .. i .. "] " .. passiveStr .. " ‚úÖ")
                else
                    print("[" .. i .. "] " .. tostring(passive) .. " ‚ùå (ignorado)")
                end
            end
        else
            print("‚ùå Nenhuma passiva encontrada")
        end
        print("==========================================\n")
        
        notify("Debug Completo", "üîç Passivas exibidas no console", 2)
    else
        print("‚ùå Unit " .. selectedUnit .. " n√£o encontrada!")
        notify("Erro Debug", "‚ùå Unit n√£o encontrada!", 2)
    end
end)

DebugSection:NewButton("üß™ Testar Detec√ß√£o", "Testar sistema de detec√ß√£o", function()
    if not selectedUnit or not selectedPassives or not next(selectedPassives) then
        notify("Erro Teste", "‚ùå Configure unit e passivas primeiro!", 2)
        return
    end
    
    print("\nüß™ === TESTE DE DETEC√á√ÉO ===")
    print("Unit: " .. selectedUnit)
    print("Passivas procuradas: " .. table.concat(selectedPassives, ", "))
    
    detectionConfig.enabled = true
    
    local found, foundPassive = detectDesiredPassive(selectedUnit)
    print("Resultado: " .. (found and ("‚úÖ ENCONTRADO: " .. foundPassive) or "‚ùå N√ÉO ENCONTRADO"))
    
    detectionConfig.enabled = false
    print("==============================\n")
    
    notify("Teste Conclu√≠do", "üß™ Resultado no console: " .. (found and "‚úÖ Encontrado" or "‚ùå N√£o encontrado"), 3)
end)

-- Inicializa√ß√£o
notify("Sistema Corrigido", "üöÄ Luvwas Passive Roll - Mobile Fixed carregado!", 3)
print("üöÄ Luvwas Passive Roll - Mobile Edition FIXED carregado!")
print("üìã GameData: " .. (GameData and "‚úÖ Carregado" or "‚ùå Erro"))
print("üß© HasPassive: " .. (HasPassive and "‚úÖ Dispon√≠vel" or "‚ö†Ô∏è Manual"))
print("üéÆ Sistema pronto para uso!")
print("üîß CORRE√á√ïES:")
print("   ‚úÖ Sistema Multi-Unit corrigido")
print("   ‚úÖ Toggles de passivas removidos") 
print("   ‚úÖ Melhor debugging e log")
