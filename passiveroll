local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua"))()

local AllPassives = {
    ["Normal"] = {
        "Dmg1", "Dmg2", "Dmg3",
        "Boss1", "Boss2", "Boss3", 
        "Drop1", "Drop2", "Drop3",
        "Yen1", "Yen2", "Yen3",
        "LevelUp1", "LevelUp2", "LevelUp3",
        "Ability1", "Ability2", "Ability3",
        "Leader1", "Leader2", "Leader3",
        "Luck1", "Luck2", "Luck3", "Luck4",
        "Cap1", "Cap2", "Cap3",
        "Speed", "Giant", "Tiny", "Tank", "Blessing",
        "Gold", "Merc", "Dragon", "Prodigy", "Ghost", "Ace",
        "Demon", "BrokenLimiter", "Angel", "Interstellar"
    },
    ["Summer24"] = {
        "SeaSpearman", "DevastatingDaylight", "SummerFortune",
        "SapphireSummer", "SummerGenerosity", "ShiningSun", "CoralCommander"
    }
}
AllPassives["Requiem"] = AllPassives["Normal"]

-- Store initialization
local LocalDairebStore, GameData
local success, error = pcall(function()
    LocalDairebStore = require(game:GetService("ReplicatedStorage").ModuleScripts.LocalDairebStore)
    LocalDairebStore:WaitForInit()
    GameData = LocalDairebStore.GetStoreProxy("GameData")
end)

if not success then
    Library:Notify("‚ùå Erro ao carregar GameData: " .. tostring(error), 10)
    return
end

-- HasPassive module (optional)
local HasPassive = nil
pcall(function()
    HasPassive = require(game:GetService("ReplicatedStorage").ModuleScripts.HasPassive)
end)

-- Global variables
local selectedUnit, selectedMachine = nil, "Normal"
local selectedPassives = {}
local rolling = false
local rollDelay = 0.2  -- MUITO MAIS R√ÅPIDO!
local rollCount = 0
local autoRollToggle = nil

-- MULTI-UNIT SYSTEM
local multiUnitQueue = {}
local multiUnitRolling = false
local currentUnitIndex = 1
local multiUnitToggle = nil
local queueLabels = {} -- Array de labels para cada slot

-- Log system
local passiveLog = {}
local logLabels = {} -- Array de labels para cada entrada do log

-- Detection configuration
local detectionConfig = {
    baseDelay = 0.3,  -- MAIS R√ÅPIDO!
    maxRetries = 2,    -- MENOS TENTATIVAS = MAIS R√ÅPIDO
    retryDelay = 0.1,  -- DELAY M√çNIMO
    enabled = false
}

-- ===== CORE FUNCTIONS =====

local function getCurrentUnit()
    local success, result = pcall(function()
        local gameData = GameData:GetData()
        if not gameData or not gameData.Pets then return nil end
        
        for _, unit in pairs(gameData.Pets) do
            if unit and unit.UID == selectedUnit then
                return unit
            end
        end
        return nil
    end)
    
    return success and result or nil
end

local function passiveToString(passive)
    if passive == nil then return nil end
    
    if type(passive) == "string" and passive ~= "" and passive ~= "nil" then 
        return passive 
    end
    
    if type(passive) == "number" then 
        return tostring(passive) 
    end
    
    local str = tostring(passive)
    if str and str ~= "" and str ~= "nil" and str ~= "false" and str ~= "true" then
        return str
    end
    
    return nil
end

local function checkHasPassive(unit, passiveName)
    if not HasPassive or not unit or not passiveName then 
        return false 
    end
    
    local methods = {
        function() return HasPassive(unit, passiveName) end,
        function() return HasPassive.HasPassive(unit, passiveName) end,
        function() return HasPassive.Check(unit, passiveName) end,
        function() return HasPassive(unit.UID, passiveName) end
    }
    
    for i, method in ipairs(methods) do
        local success, result = pcall(method)
        if success and result then
            return true
        end
    end
    
    return false
end

local function checkPassivesManual(unit, desiredPassives)
    if not unit or not unit.Passives or not desiredPassives then 
        return false, nil 
    end
    
    local currentPassives = {}
    
    for i, passive in pairs(unit.Passives) do
        local passiveStr = passiveToString(passive)
        if passiveStr then
            currentPassives[passiveStr] = true
        end
    end
    
    for _, desired in pairs(desiredPassives) do
        local desiredStr = tostring(desired)
        
        if currentPassives[desiredStr] then
            return true, desiredStr
        end
        
        for currentPassive, _ in pairs(currentPassives) do
            if string.lower(currentPassive) == string.lower(desiredStr) then
                return true, currentPassive
            end
        end
    end
    
    return false, nil
end

local function detectDesiredPassive()
    if not detectionConfig.enabled or not selectedUnit or not selectedPassives or not next(selectedPassives) then
        return false, nil
    end
    
    for attempt = 1, detectionConfig.maxRetries do
        local currentUnit = getCurrentUnit()
        if not currentUnit then
            task.wait(detectionConfig.retryDelay)
            continue
        end
        
        if HasPassive then
            for _, desiredPassive in pairs(selectedPassives) do
                if checkHasPassive(currentUnit, desiredPassive) then
                    return true, desiredPassive
                end
            end
        end
        
        local found, foundPassive = checkPassivesManual(currentUnit, selectedPassives)
        if found then
            return true, foundPassive
        end
        
        if attempt < detectionConfig.maxRetries then
            task.wait(detectionConfig.retryDelay)
        end
    end
    
    return false, nil
end

-- Log system functions - LABELS INDIVIDUAIS
local function addToLog(passiveName, rollsUsed, unitName)
    local timestamp = os.date("%H:%M:%S")
    local unitDisplay = unitName or "Unit"
    local logEntry = string.format("[%s] %s: %s (%d rolls)", timestamp, unitDisplay, passiveName, rollsUsed)
    table.insert(passiveLog, logEntry)
    
    -- Keep only last 10 entries
    if #passiveLog > 10 then
        table.remove(passiveLog, 1)
    end
    
    -- Atualizar labels individuais
    for i = 1, 10 do
        if logLabels[i] then
            if i <= #passiveLog then
                pcall(function() logLabels[i]:SetText(passiveLog[i]) end)
            else
                pcall(function() logLabels[i]:SetText(string.format("[%d] (Aguardando...)", i)) end)
            end
        end
    end
end

local function clearLog()
    passiveLog = {}
    -- Limpar todos os labels individuais
    for i = 1, 10 do
        if logLabels[i] then
            pcall(function() logLabels[i]:SetText(string.format("[%d] (Aguardando...)", i)) end)
        end
    end
end

local function stopRolling(reason, foundPassive)
    rolling = false
    detectionConfig.enabled = false
    
    if foundPassive and rollCount > 0 then
        addToLog(foundPassive, rollCount)
    end
    
    if autoRollToggle then
        pcall(function() autoRollToggle:SetValue(false) end)
    end
    
    Library:Notify("üõë " .. reason, 5)
end

local function updatePassiveDisplay(unit)
    if not unit or not unit.Passives then
        pcall(function() currentPassivesLabel:SetText("Passivas: N/A") end)
        return
    end
    
    local passiveList = {}
    for _, passive in pairs(unit.Passives) do
        local passiveStr = passiveToString(passive)
        if passiveStr then
            table.insert(passiveList, passiveStr)
        end
    end
    
    local displayText = "Passivas: " .. (#passiveList > 0 and table.concat(passiveList, ", ") or "Nenhuma")
    pcall(function() currentPassivesLabel:SetText(displayText) end)
end

local function GetUnits()
    local success, result = pcall(function()
        local gameData = GameData:GetData()
        if not gameData or not gameData.Pets then
            return {"Nenhum pet encontrado"}
        end
            
        local list = {}
        for _, unit in pairs(gameData.Pets) do
            if unit and unit.UID then
                local displayName = unit.PetId or "Unknown"
                if unit.CustomName and unit.CustomName ~= "" then
                    displayName = displayName .. " (" .. unit.CustomName .. ")"
                end
                table.insert(list, tostring(unit.UID) .. " | " .. displayName)
            end
        end
        
        return #list > 0 and list or {"Nenhum pet encontrado"}
    end)
    
    return success and result or {"Erro ao carregar pets"}
end

-- ===== MULTI-UNIT FUNCTIONS =====

local function getUnitByUID(uid)
    local success, result = pcall(function()
        local gameData = GameData:GetData()
        if not gameData or not gameData.Pets then return nil end
        
        for _, unit in pairs(gameData.Pets) do
            if unit and unit.UID == uid then
                return unit
            end
        end
        return nil
    end)
    
    return success and result or nil
end

local function getUnitDisplayName(uid)
    local unit = getUnitByUID(uid)
    if not unit then return "Unit " .. tostring(uid) end
    
    local displayName = unit.PetId or "Unknown"
    if unit.CustomName and unit.CustomName ~= "" then
        displayName = unit.CustomName
    end
    return displayName
end

-- Update queue display - LABELS INDIVIDUAIS
local function updateQueueDisplay()
    for i = 1, 15 do
        if queueLabels[i] then
            if i <= #multiUnitQueue then
                local unitData = multiUnitQueue[i]
                local status = ""
                if i == currentUnitIndex and multiUnitRolling then
                    status = " üé≤"
                elseif unitData.completed then
                    status = " ‚úÖ"
                else
                    status = " ‚è≥"
                end
                local shortName = getUnitDisplayName(unitData.uid)
                if #shortName > 12 then
                    shortName = shortName:sub(1, 12) .. "..."
                end
                pcall(function() queueLabels[i]:SetText(string.format("%d. %s%s", i, shortName, status)) end)
            else
                pcall(function() queueLabels[i]:SetText(string.format("%d. [Vazio]", i)) end)
            end
        end
    end
end

local function addUnitToQueue()
    if not selectedUnit then
        Library:Notify("‚ùå Selecione um boneco primeiro!", 3)
        return
    end
    
    for _, unitData in ipairs(multiUnitQueue) do
        if unitData.uid == selectedUnit then
            Library:Notify("‚ö†Ô∏è Este boneco j√° est√° na fila!", 3)
            return
        end
    end
    
    if #multiUnitQueue >= 15 then
        Library:Notify("‚ö†Ô∏è Fila cheia! M√°ximo 15 personagens.", 3)
        return
    end
    
    local unitName = getUnitDisplayName(selectedUnit)
    table.insert(multiUnitQueue, {
        uid = selectedUnit,
        name = unitName,
        completed = false
    })
    
    updateQueueDisplay()
    Library:Notify("‚úÖ " .. unitName .. " adicionado! Total: " .. #multiUnitQueue, 3)
end

local function clearQueue()
    multiUnitQueue = {}
    currentUnitIndex = 1
    updateQueueDisplay()
    Library:Notify("üóëÔ∏è Fila limpa!", 2)
end

local function stopMultiUnitRolling(reason, foundPassive, unitName)
    multiUnitRolling = false
    rolling = false
    detectionConfig.enabled = false
    
    if foundPassive and rollCount > 0 then
        addToLog(foundPassive, rollCount, unitName)
    end
    
    if multiUnitToggle then
        pcall(function() multiUnitToggle:SetValue(false) end)
    end
    
    updateQueueDisplay()
    Library:Notify("üõë Multi-Unit: " .. reason, 5)
end

-- ===== UI SETUP =====

local Window = Library:CreateWindow({ 
    Title = "Luvwas Passive Roll", 
    Center = true, 
    AutoShow = true 
})

local Tabs = { 
    Main = Window:AddTab("Main"),
    MultiUnit = Window:AddTab("Multi-Unit"),
    Debug = Window:AddTab("Debug"),
    Settings = Window:AddTab("Settings")
}

local LeftGroup = Tabs.Main:AddLeftGroupbox("Configura√ß√£o")
local RightGroup = Tabs.Main:AddRightGroupbox("Controles")
local StatusGroup = Tabs.Main:AddRightGroupbox("Status")
local DebugGroup = Tabs.Debug:AddLeftGroupbox("Debug & Test")
local LogGroup = Tabs.Debug:AddRightGroupbox("Passive Log")

-- MULTI-UNIT TAB
local MultiLeftGroup = Tabs.MultiUnit:AddLeftGroupbox("Gerenciar Fila")
local MultiRightGroup = Tabs.MultiUnit:AddRightGroupbox("Controle Multi-Unit")

-- Status indicators
StatusGroup:AddLabel("GameData: " .. (GameData and "‚úÖ OK" or "‚ùå Erro"))
StatusGroup:AddLabel("HasPassive: " .. (HasPassive and "‚úÖ Dispon√≠vel" or "‚ö†Ô∏è Manual apenas"))
local rollStatusLabel = StatusGroup:AddLabel("Status: Aguardando")
local currentPassivesLabel = StatusGroup:AddLabel("Passivas: N/A")

-- Unit selection
local unitDropdown = LeftGroup:AddDropdown("UnitSelect", {
    Values = GetUnits(),
    Multi = false,
    Text = "Selecione o Boneco",
    AllowNull = true,
    Search = true,
})

unitDropdown:OnChanged(function(val)
    if val and not val:find("Erro") and not val:find("Nenhum") then
        selectedUnit = tonumber(val:match("^(%d+)"))
        Library:Notify("‚úÖ Unit selecionada: " .. tostring(selectedUnit), 2)
        
        local unit = getCurrentUnit()
        updatePassiveDisplay(unit)
    else
        selectedUnit = nil
        pcall(function() currentPassivesLabel:SetText("Passivas: N/A") end)
    end
end)

LeftGroup:AddButton("üîÑ Atualizar Lista", function()
    unitDropdown:SetValues(GetUnits())
end)

-- Machine selection
local machineDropdown = LeftGroup:AddDropdown("MachineSelect", {
    Values = {"Normal","Requiem","Summer24"},
    Default = "Normal",
    Multi = false,
    Text = "M√°quina",
})

-- Passive selection
local passiveDropdown = LeftGroup:AddDropdown("PassiveSelect", {
    Values = AllPassives["Normal"],
    Default = {},
    Multi = true,
    Text = "Passivas Desejadas",
})

machineDropdown:OnChanged(function(val)
    selectedMachine = val
    passiveDropdown:SetValues(AllPassives[val] or AllPassives["Normal"])
    passiveDropdown:SetValue({})
    selectedPassives = {}
end)

passiveDropdown:OnChanged(function(vals)
    selectedPassives = {}
    
    if vals then
        if type(vals) == "table" then
            for i, passive in ipairs(vals) do
                if type(passive) == "string" and passive ~= "" then
                    table.insert(selectedPassives, passive)
                end
            end
            
            if #selectedPassives == 0 then
                for k, passive in pairs(vals) do
                    if type(passive) == "string" and passive ~= "" then
                        table.insert(selectedPassives, passive)
                    elseif type(k) == "string" and k ~= "" and passive == true then
                        table.insert(selectedPassives, k)
                    end
                end
            end
        elseif type(vals) == "string" then
            table.insert(selectedPassives, vals)
        end
    end
    
    local count = #selectedPassives
    if count > 0 then
        Library:Notify("‚úÖ " .. count .. " passivas selecionadas", 3)
    end
end)

-- Timing controls
LeftGroup:AddSlider("RollDelay", {
    Text = "Delay entre rolls (s)",
    Default = 0.2,  -- VALOR PADR√ÉO MAIS R√ÅPIDO!
    Min = 0.1,
    Max = 3,
    Rounding = 1,
}):OnChanged(function(val)
    rollDelay = val
end)

LeftGroup:AddSlider("DetectionDelay", {
    Text = "Delay base detec√ß√£o (s)",
    Default = 0.3,  -- VALOR PADR√ÉO MAIS R√ÅPIDO!
    Min = 0.1,
    Max = 8,
    Rounding = 1,
}):OnChanged(function(val)
    detectionConfig.baseDelay = val
end)

-- MAIN AUTO ROLL TOGGLE
autoRollToggle = RightGroup:AddToggle("AutoRoll", {
    Text = "üé≤ Start Auto Roll",
    Default = false,
})

autoRollToggle:OnChanged(function(val)
    if val then
        if not selectedUnit then
            Library:Notify("‚ùå Selecione um boneco primeiro!", 3)
            autoRollToggle:SetValue(false)
            return
        end
        
        if not selectedPassives or not next(selectedPassives) then
            Library:Notify("‚ùå Selecione pelo menos uma passiva!", 3)
            autoRollToggle:SetValue(false)
            return
        end
        
        rolling = true
        rollCount = 0
        detectionConfig.enabled = true
        rollStatusLabel:SetText("Status: üé≤ Iniciando...")
        
        Library:Notify("üöÄ Auto Roll iniciado!", 4)
        
        task.spawn(function()
            while rolling do
                rollCount = rollCount + 1
                rollStatusLabel:SetText("Status: üé≤ Roll #" .. rollCount)
                
                local rollSuccess, rollError = pcall(function()
                    game:GetService("ReplicatedStorage").Remote.RollPassive:FireServer(
                        selectedUnit, selectedMachine, true, 1
                    )
                end)
                
                if not rollSuccess then
                    stopRolling("Erro no roll: " .. tostring(rollError))
                    break
                end
                
                task.wait(detectionConfig.baseDelay)
                
                if not rolling then break end
                
                local found, foundPassive = detectDesiredPassive()
                
                if found then
                    Library:Notify("üéâ PASSIVA ENCONTRADA: " .. foundPassive .. "!", 10)
                    stopRolling("Passiva desejada encontrada!", foundPassive)
                    break
                end
                
                local unit = getCurrentUnit()
                updatePassiveDisplay(unit)
                
                if not rolling then break end
                
                task.wait(rollDelay)
            end
            
            rollStatusLabel:SetText("Status: ‚èπÔ∏è Parado")
        end)
        
    else
        stopRolling("Parado pelo usu√°rio")
        rollStatusLabel:SetText("Status: ‚èπÔ∏è Parado")
    end
end)

RightGroup:AddButton("üõë Emergency Stop", function()
    stopRolling("Emergency stop")
    rollStatusLabel:SetText("Status: Stopped")
    Library:Notify("System stopped!", 2)
end)

-- ===== MULTI-UNIT TAB UI =====

MultiLeftGroup:AddButton("‚ûï Adicionar √† Fila", function()
    addUnitToQueue()
end)

MultiLeftGroup:AddDivider()

-- Criar labels individuais para cada slot da fila
MultiLeftGroup:AddLabel("üéØ Fila Multi-Unit:")
for i = 1, 15 do
    queueLabels[i] = MultiLeftGroup:AddLabel(string.format("%d. [Vazio]", i))
end

MultiLeftGroup:AddDivider()

MultiLeftGroup:AddButton("üóëÔ∏è Limpar Fila", function()
    clearQueue()
end)

-- Multi-unit controls
multiUnitToggle = MultiRightGroup:AddToggle("MultiUnitRoll", {
    Text = "üöÄ Start Multi-Unit",
    Default = false,
})

multiUnitToggle:OnChanged(function(val)
    if val then
        if #multiUnitQueue == 0 then
            Library:Notify("‚ùå Adicione pelo menos um personagem √† fila!", 3)
            multiUnitToggle:SetValue(false)
            return
        end
        
        if not selectedPassives or not next(selectedPassives) then
            Library:Notify("‚ùå Selecione pelo menos uma passiva na aba Main!", 3)
            multiUnitToggle:SetValue(false)
            return
        end
        
        multiUnitRolling = true
        rolling = true
        currentUnitIndex = 1
        rollCount = 0
        detectionConfig.enabled = true
        
        Library:Notify("üöÄ Multi-Unit iniciado! Processando " .. #multiUnitQueue .. " personagens", 4)
        
        task.spawn(function()
            while multiUnitRolling and currentUnitIndex <= #multiUnitQueue do
                local currentUnitData = multiUnitQueue[currentUnitIndex]
                if not currentUnitData or currentUnitData.completed then
                    currentUnitIndex = currentUnitIndex + 1
                    continue
                end
                
                selectedUnit = currentUnitData.uid
                local unitName = getUnitDisplayName(currentUnitData.uid)
                
                Library:Notify("üé≤ Processando: " .. unitName, 3)
                updateQueueDisplay()
                
                local unitRollCount = 0
                while multiUnitRolling and not currentUnitData.completed do
                    unitRollCount = unitRollCount + 1
                    rollCount = rollCount + 1
                    
                    local rollSuccess, rollError = pcall(function()
                        game:GetService("ReplicatedStorage").Remote.RollPassive:FireServer(
                            currentUnitData.uid, selectedMachine, true, 1
                        )
                    end)
                    
                    if not rollSuccess then
                        stopMultiUnitRolling("Erro no roll: " .. tostring(rollError))
                        break
                    end
                    
                    task.wait(detectionConfig.baseDelay)
                    
                    if not multiUnitRolling then break end
                    
                    local found, foundPassive = detectDesiredPassive()
                    
                    if found then
                        Library:Notify("üéâ " .. unitName .. " pegou " .. foundPassive .. "! Continuando...", 5)
                        
                        currentUnitData.completed = true
                        addToLog(foundPassive, unitRollCount, unitName)
                        
                        -- Remove da fila
                        for i, unit in ipairs(multiUnitQueue) do
                            if unit.uid == currentUnitData.uid then
                                table.remove(multiUnitQueue, i)
                                if currentUnitIndex > i then
                                    currentUnitIndex = currentUnitIndex - 1
                                elseif currentUnitIndex == i then
                                    currentUnitIndex = currentUnitIndex - 1
                                end
                                break
                            end
                        end
                        
                        updateQueueDisplay()
                        break
                    end
                    
                    task.wait(rollDelay)
                end
                
                if currentUnitData.completed or not multiUnitRolling then
                    currentUnitIndex = currentUnitIndex + 1
                end
            end
            
            if #multiUnitQueue == 0 then
                Library:Notify("üéâ Todos os personagens completaram!", 8)
                stopMultiUnitRolling("Todos completaram!")
            else
                multiUnitRolling = false
                rolling = false
                detectionConfig.enabled = false
                if multiUnitToggle then
                    pcall(function() multiUnitToggle:SetValue(false) end)
                end
            end
            
            updateQueueDisplay()
        end)
        
    else
        stopMultiUnitRolling("Parado pelo usu√°rio")
    end
end)

MultiRightGroup:AddButton("‚èπÔ∏è Stop Multi-Unit", function()
    stopMultiUnitRolling("Emergency stop")
    Library:Notify("üõë Multi-Unit parado!", 2)
end)

-- ===== LOG SYSTEM UI =====

-- Criar labels individuais para cada entrada do log
LogGroup:AddLabel("üìã Passive Log:")
for i = 1, 10 do
    logLabels[i] = LogGroup:AddLabel(string.format("[%d] (Aguardando...)", i))
end

LogGroup:AddDivider()

LogGroup:AddButton("üóëÔ∏è Limpar Log", function()
    clearLog()
    Library:Notify("üìã Log limpo!", 2)
end)

-- ===== DEBUG FUNCTIONS =====

DebugGroup:AddButton("üîç Ver Passivas Atuais", function()
    if not selectedUnit then
        Library:Notify("‚ùå Selecione uma unit primeiro!", 2)
        return
    end
    
    local unit = getCurrentUnit()
    if unit then
        print("\n=== PASSIVAS DA UNIT " .. selectedUnit .. " ===")
        
        if unit.Passives and next(unit.Passives) then
            for i, passive in pairs(unit.Passives) do
                local passiveStr = passiveToString(passive)
                if passiveStr then
                    print("[" .. i .. "] " .. passiveStr .. " ‚úÖ")
                else
                    print("[" .. i .. "] " .. tostring(passive) .. " ‚ùå (ignorado)")
                end
            end
        else
            print("‚ùå Nenhuma passiva encontrada")
        end
        print("=====================================")
        
        updatePassiveDisplay(unit)
    else
        print("‚ùå Unit n√£o encontrada!")
    end
    
    Library:Notify("üìã Informa√ß√µes no console", 2)
end)

DebugGroup:AddButton("üß™ Testar Detec√ß√£o", function()
    if not selectedUnit or not selectedPassives or not next(selectedPassives) then
        Library:Notify("‚ùå Configure unit e passivas primeiro!", 2)
        return
    end
    
    print("\n=== TESTE DE DETEC√á√ÉO ===")
    detectionConfig.enabled = true
    
    local found, foundPassive = detectDesiredPassive()
    print("Resultado: " .. (found and ("‚úÖ ENCONTRADO: " .. foundPassive) or "‚ùå N√ÉO ENCONTRADO"))
    
    detectionConfig.enabled = false
    print("========================")
    Library:Notify("üìã Teste no console", 2)
end)

-- MEGA EXPANDIR DEBUG
DebugGroup:AddDivider()
DebugGroup:AddLabel("üìä Status do Sistema:")
DebugGroup:AddLabel("üîß Configura√ß√µes Atuais:")
DebugGroup:AddLabel("‚öôÔ∏è Delay de Roll: " .. rollDelay .. "s")
DebugGroup:AddLabel("‚è±Ô∏è Delay de Detec√ß√£o: " .. detectionConfig.baseDelay .. "s")
DebugGroup:AddLabel("üîÑ Max Tentativas: " .. detectionConfig.maxRetries)
DebugGroup:AddLabel("‚è≥ Delay entre Tentativas: " .. detectionConfig.retryDelay .. "s")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üìà Estat√≠sticas:")
DebugGroup:AddLabel("üé≤ Rolls Totais: 0")
DebugGroup:AddLabel("‚úÖ Passivas Encontradas: 0")
DebugGroup:AddLabel("‚è∞ Tempo de Execu√ß√£o: 0s")
DebugGroup:AddLabel("üéØ Taxa de Sucesso: 0%")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üîç Informa√ß√µes T√©cnicas:")
DebugGroup:AddLabel("üíæ GameData Status: " .. (GameData and "Carregado" or "Erro"))
DebugGroup:AddLabel("üß© HasPassive Status: " .. (HasPassive and "Dispon√≠vel" or "Manual"))
DebugGroup:AddLabel("üéÆ M√°quina Selecionada: " .. selectedMachine)
DebugGroup:AddLabel("üìã Passivas na Lista: " .. #selectedPassives)
DebugGroup:AddDivider()
DebugGroup:AddLabel("üöÄ Sistema Multi-Unit:")
DebugGroup:AddLabel("üìä Fila Atual: " .. #multiUnitQueue .. "/15")
DebugGroup:AddLabel("üîÑ Status: " .. (multiUnitRolling and "Rodando" or "Parado"))
DebugGroup:AddLabel("üìç √çndice Atual: " .. currentUnitIndex)
DebugGroup:AddDivider()
DebugGroup:AddLabel("üõ†Ô∏è Ferramentas de Debug:")
DebugGroup:AddLabel("üîç Use 'Ver Passivas Atuais' para inspecionar")
DebugGroup:AddLabel("üß™ Use 'Testar Detec√ß√£o' para verificar")
DebugGroup:AddLabel("üìä Monitore o console para logs detalhados")
DebugGroup:AddDivider()
DebugGroup:AddLabel("‚ö†Ô∏è Avisos Importantes:")
DebugGroup:AddLabel("‚Ä¢ Sempre selecione uma unit antes de testar")
DebugGroup:AddLabel("‚Ä¢ Configure passivas na aba Main primeiro")
DebugGroup:AddLabel("‚Ä¢ Verifique o console para informa√ß√µes detalhadas")
DebugGroup:AddLabel("‚Ä¢ Use delays adequados para seu servidor")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üéØ Dicas de Uso:")
DebugGroup:AddLabel("‚Ä¢ Delay muito baixo pode causar erros")
DebugGroup:AddLabel("‚Ä¢ Muitas tentativas podem sobrecarregar")
DebugGroup:AddLabel("‚Ä¢ Multi-Unit processa sequencialmente")
DebugGroup:AddLabel("‚Ä¢ Sistema para automaticamente ao encontrar")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üìù Notas da Vers√£o:")
DebugGroup:AddLabel("‚úÖ Detec√ß√£o melhorada")
DebugGroup:AddLabel("‚úÖ Multi-Unit implementado")
DebugGroup:AddLabel("‚úÖ Interface expandida")
DebugGroup:AddLabel("‚úÖ Log com timestamps")
DebugGroup:AddLabel("‚úÖ Sistema de fila robusto")
DebugGroup:AddLabel("‚úÖ Remo√ß√£o autom√°tica")
DebugGroup:AddLabel("‚úÖ Continuidade garantida")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üîß Configura√ß√µes Avan√ßadas:")
DebugGroup:AddLabel("‚Ä¢ baseDelay: Tempo ap√≥s cada roll")
DebugGroup:AddLabel("‚Ä¢ maxRetries: Tentativas de detec√ß√£o")
DebugGroup:AddLabel("‚Ä¢ retryDelay: Intervalo entre tentativas")
DebugGroup:AddLabel("‚Ä¢ rollDelay: Intervalo entre rolls")
DebugGroup:AddDivider()
DebugGroup:AddLabel("üìä Monitoramento:")
DebugGroup:AddLabel("‚Ä¢ Console mostra logs detalhados")
DebugGroup:AddLabel("‚Ä¢ Notifica√ß√µes informam progresso")
DebugGroup:AddLabel("‚Ä¢ Status atualiza em tempo real")
DebugGroup:AddLabel("‚Ä¢ Log mant√©m hist√≥rico completo")

-- Initialize displays
task.spawn(function()
    task.wait(1)
    unitDropdown:SetValues(GetUnits())
    updateQueueDisplay()
    clearLog()
end)

-- Theme and Save managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)

Library:Notify("üöÄ Luvwas Passive Roll carregado!", 3)
